---
# PostgreSQL prepare for install (for Debian based only)
- name: PostgreSQL | ensure postgresql database-cluster manager package
  ansible.builtin.package:
    name: postgresql-common
    state: present
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  environment: "{{ proxy_env | default({}) }}"
  tags: install_postgres

- name: PostgreSQL | disable initializing of a default postgresql cluster
  ansible.builtin.replace:
    path: /etc/postgresql-common/createcluster.conf
    replace: create_main_cluster = false
    regexp: ^#?create_main_cluster.*$
  tags: install_postgres

- name: PostgreSQL | enable data-checksums of a default postgresql cluster
  ansible.builtin.replace:
    path: /etc/postgresql-common/createcluster.conf
    replace: initdb_options = '--data-checksums'
    regexp: ^#?initdb_options.*$
  when: postgresql_data_checksums is defined and postgresql_data_checksums | bool
  tags: install_postgres

- name: PostgreSQL | disable log rotation with logrotate for postgresql
  ansible.builtin.file:
    dest: /etc/logrotate.d/postgresql-common
    state: absent
  tags: install_postgres
  
#PostgreSQL main packages
- name: Install PostgreSQL packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop: "{{ postgresql_packages }}"
  become: yes
  environment: "{{ proxy_env | default({}) }}"
  register: postgresql_packages
  until: postgresql_packages is success
  delay: 5
  retries: 3
  tags: install_postgres

# timescaledb (if enable_timescale is defined)
- name: Install TimescaleDB package
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ timescaledb_package }}"
  become: yes
  vars:
    timescaledb_package:
      - >
        {% if postgresql_version | int >= 11 %}
        timescaledb-2-postgresql-{{ postgresql_version }}
        {% else %}
        timescaledb-postgresql-{{ postgresql_version }}
        {% endif %}
  register: timescaledb_package
  until: timescaledb_package is success
  delay: 5
  retries: 3
  environment: "{{ proxy_env | default({}) }}"
  when:
    - install_timescaledb is defined
    - install_timescaledb | bool
  tags: install_postgres, install_timescaledb

- name: Prepare PostgreSQL | create statistics directory (if not already exists)
  ansible.builtin.file:
    path: "{{ postgresql_stats_temp_directory_path }}"
    state: directory
    mode: "01777"
  when:
    - postgresql_stats_temp_directory_path is defined
    - postgresql_stats_temp_directory_path != 'none'
    - postgresql_version is version('14', '<=')
  tags: pgsql_stats_tmp

- name: Prepare PostgreSQL | mount the statistics directory in memory (tmpfs)
  ansible.posix.mount:
    path: "{{ postgresql_stats_temp_directory_path }}"
    src: tmpfs
    fstype: tmpfs
    opts: "size={{ postgresql_stats_temp_directory_size }},uid=postgres,gid=postgres"
    state: mounted
  when:
    - postgresql_stats_temp_directory_path is defined
    - postgresql_stats_temp_directory_path != 'none'
    - postgresql_version is version('14', '<=')
  tags: pgsql_stats_tmp

- name: Prepare PostgreSQL | make sure the postgresql log directory "{{ postgresql_log_dir }}" exists
  ansible.builtin.file:
    path: "{{ postgresql_log_dir }}"
    owner: postgres
    group: postgres
    state: directory
    mode: "0700"

- name: Prepare PostgreSQL | make sure the custom WAL directory "{{ postgresql_wal_dir }}" exists
  ansible.builtin.file:
    path: "{{ postgresql_wal_dir }}"
    owner: postgres
    group: postgres
    state: directory
    mode: "0700"
  when: postgresql_wal_dir is defined and postgresql_wal_dir | length > 0
  tags: custom_wal_dir

- name: Prepare PostgreSQL | Create cluster postgresql
  become: true
  become_user: postgres
  ansible.builtin.command: >
    /usr/bin/pg_createcluster {{ postgresql_version }} {{ postgresql_cluster_name }}
    -d {{ postgresql_data_dir }}
    -p {{ postgresql_port }}
    -e {{ postgresql_encoding }}
    --locale {{ postgresql_locale }}
  register: pg_createcluster_result
  failed_when: pg_createcluster_result.rc != 0

- name: Prepare PostgreSQL | Start PostgreSQL
  become: true
  become_user: postgres
  ansible.builtin.command: >
    {{ postgresql_bin_dir }}/pg_ctl
    start -D {{ postgresql_data_dir }}
    -o "-c config_file={{ postgresql_conf_dir }}/postgresql.conf"
  register: pg_ctl_start_result
  failed_when:
    - pg_ctl_start_result.rc != 0

- name: Prepare PostgreSQL | Check exists postgresql.base.conf
  ansible.builtin.stat:
    path: "{{ postgresql_conf_dir }}/postgresql.base.conf"
  register: conf_exists

- name: Prepare PostgreSQL | Move base conf file in postgresql.base.conf
  ansible.builtin.command: mv {{ postgresql_conf_dir }}/postgresql.conf {{ postgresql_conf_dir }}/postgresql.base.conf
  when: not conf_exists.stat.exists

- name: Prepare PostgreSQL | Generate postgresql.conf
  ansible.builtin.template:
    src: templates/postgresql.conf.j2
    dest: "{{ postgresql_conf_dir }}/postgresql.conf"
    owner: postgres
    group: postgres
    mode: "0640"

- name: Prepare PostgreSQL | Restart PostgreSQL 
  become: true
  become_user: postgres
  ansible.builtin.command: "{{ postgresql_bin_dir }}/pg_ctl restart -D {{ postgresql_data_dir }}"
  register: pg_ctl_restart_result
  failed_when:
    - pg_ctl_restart_result.rc != 0

- name: Prepare PostgreSQL | Check PostgreSQL is accepting connections
  become: true
  become_user: postgres
  ansible.builtin.command: "{{ postgresql_bin_dir }}/pg_isready -p {{ postgresql_port }}"
  register: pg_isready_result
  until: pg_isready_result.rc == 0
  retries: 30
  delay: 10
  changed_when: false

- name: Prepare PostgreSQL | Generate pg_hba.conf 
  ansible.builtin.template:
    src: templates/pg_hba.conf.j2
    dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: "0640"

- name: Prepare PostgreSQL | reload for apply the pg_hba.conf
  become: true
  become_user: postgres
  ansible.builtin.command: "{{ postgresql_bin_dir }}/pg_ctl reload -D {{ postgresql_data_dir }}"

- name: Prepare PostgreSQL | Make sure the user postgres are present, and password does not differ from the specified
  community.postgresql.postgresql_user:
    db: postgres
    name: "postgres"
    password: "{{ postgresql_superuser_password }}"
    encrypted: true
    role_attr_flags: "SUPERUSER"
    login_unix_socket: "{{ postgresql_unix_socket_dir }}"
    port: "{{ postgresql_port }}"
    state: present
  become: true
  become_user: postgres

- name: Prepare PostgreSQL | check PostgreSQL is started
  become: true
  become_user: postgres
  ansible.builtin.command: "{{ postgresql_bin_dir }}/pg_ctl status -D {{ postgresql_data_dir }}"
  register: pg_ctl_status_result
  changed_when: false
  failed_when:
    - pg_ctl_status_result.rc != 0
    - pg_ctl_status_result.rc != 3

...