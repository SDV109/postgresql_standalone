---

- name: Check if postgresql.conf exists
  ansible.builtin.stat:
    path: "{{ postgresql_conf_dir }}/postgresql.conf"
  register: postgresql_conf_stat

- name: Fail if postgresql.conf doesn't exist
  ansible.builtin.fail:
    msg: "File {{ postgresql_conf_dir }}/postgresql.conf does not exist!"
  when: postgresql_conf_stat.stat.exists == false

- name: Check if postgresql.base.conf exists
  ansible.builtin.stat:
    path: "{{ postgresql_conf_dir }}/postgresql.base.conf"
  register: postgresql_conf_stat

- name: Fail if postgresql.base.conf doesn't exist
  ansible.builtin.fail:
    msg: "File {{ postgresql_conf_dir }}/postgresql.conf does not exist!"
  when: postgresql_conf_stat.stat.exists == false

- name: Add new parameters in postgresql.conf
  lineinfile:
    path: "{{ postgresql_conf_dir }}/postgresql.conf"
    line: "{{ item.option }} = {{ item.value }}"
    state: present
    create: yes
    insert: after
  loop: "{{ new_postgresql_parameters }}"
  when: item.value != ""

- name: Replace parameters in postgresql.conf
  replace:
    path: "{{ postgresql_conf_dir }}/postgresql.conf"
    regexp: '^{{ item.option }}\s*=\s*.*$'
    replace: "{{ item.option }} = '{{ item.value }}'"
  loop: "{{ postgresql_parameters }}"
  when: item.value != ""

- name: Delete postgresql parameters from "{{ postgresql_conf_dir }}/postgresql.conf"
  ansible.builtin.lineinfile:
    path: "{{ postgresql_conf_dir }}/postgresql.conf"
    regexp: '^{{ item.option }}\s*=\s*.*$'
    state: absent
  loop: "{{ postgresql_parameters }}"
  when: item.value == ""

- name: Update pg_hba.conf
  ansible.builtin.template:
    src: templates/pg_hba.conf.j2
    dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
    owner: postgres
    group: postgres
    mode: "0640"
  notify: "reload postgres"
  tags: pg_hba, pg_hba_generate

- name: Prepare PostgreSQL | reload for apply the pg_hba.conf
  become: true
  become_user: postgres
  ansible.builtin.command: "{{ postgresql_bin_dir }}/pg_ctl reload -D {{ postgresql_data_dir }}"

- name: "Check if there are any changed parameters that require a restart"
  become: true
  become_user: postgres
  community.postgresql.postgresql_query:
    login_host: "127.0.0.1"
    login_port: "{{ postgresql_port }}"
    login_user: "postgres"
    login_password: "{{ postgresql_superuser_password }}"
    login_db: "postgres"
    query: "select name from pg_settings where pending_restart is true"
  register: pending_restart_result

- name: "Set pg_pending_restart_settings variable"
  ansible.builtin.set_fact:
    pg_pending_restart_settings: "{{ pending_restart_result.query_result }}"

- name: "Display parameters requiring PostgreSQL restart"
  ansible.builtin.debug:
    msg:
      - "On server {{ ansible_hostname }}, the following parameters have changed and require PostgreSQL to restart:"
      - "{{ pg_pending_restart_settings | map(attribute='name') | list }}"
  when: pg_pending_restart_settings | length > 0
...
