---
- name: '[Pre-Check] (ALL) Test PostgreSQL DB Access'
  ansible.builtin.command: >-
    {{ postgresql_bin_dir }}/psql -p {{ postgresql_port }} -U postgres -d postgres -tAXc 'select 1'
  changed_when: false

- name: '[Pre-Check] Make sure there are no long-running transactions (more than {{ max_transaction_sec }} seconds)'
  ansible.builtin.command: >-
    {{ postgresql_bin_dir }}/psql -p {{ postgresql_port }} -U postgres -d postgres -tAXc
    "select pid, usename, client_addr, clock_timestamp() - xact_start as xact_age,
      state, wait_event_type ||':'|| wait_event as wait_events,
      left(regexp_replace(query, E'[ \\t\\n\\r]+', ' ', 'g'),100) as query
      from pg_stat_activity
      where clock_timestamp() - xact_start > '{{ max_transaction_sec }} seconds'::interval
      and backend_type = 'client backend' and pid <> pg_backend_pid()
      order by xact_age desc limit 10"
  register: pg_long_transactions
  changed_when: false
  failed_when: false
  until: pg_long_transactions.stdout | length < 1
  retries: 30
  delay: 2

# Stop, if long-running transactions detected
- block:
    - name: "Print long-running (>{{ max_transaction_sec }}s) transactions"
      ansible.builtin.debug:
        msg: "{{ pg_long_transactions.stdout_lines }}"

    - name: "Pre-Check error. Please try again later"
      ansible.builtin.fail:
        msg: long-running transactions detected (more than {{ max_transaction_sec }} seconds), please try again later.
  when:
    - pg_long_transactions.stdout is defined
    - pg_long_transactions.stdout | length > 0
...